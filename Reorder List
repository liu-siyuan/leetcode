/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    void reorderList(ListNode *head) {
        if (head == nullptr || head->next == nullptr)
        {
            return;
        }
        
        ListNode *slow = head, *fast = head, *prev = nullptr;
        while (fast && fast->next)
        {
            prev = slow;
            slow = slow->next;
            fast = fast->next->next;
        }
        slow = reverse(slow);
        prev->next = nullptr;
        
        //merge two list
        ListNode *cur = head, *temp = nullptr;
        while (cur->next)
        {
            temp = cur->next;
            cur->next = slow;
            slow = slow->next;
            cur->next->next = temp;
            cur = temp;
        }
        
        cur->next = slow;
        
    }
    
    ListNode* reverse(ListNode *head)
    {
        if (head == nullptr || head->next == nullptr)
        {
            return head;
        }
        ListNode *prev = head;
        for (ListNode *cur = prev->next, *next = cur->next;
            cur;
            prev = cur, cur = next, next = next? next->next : nullptr)
            {
                cur->next = prev;
            }
        head->next = nullptr;
        return prev;
    }
};
