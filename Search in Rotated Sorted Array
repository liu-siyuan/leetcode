//the most difficult part is located the first and last
//author @ Siyuan Liu
class Solution {
public:
    int search(int A[], int n, int target) {
        int first = 0;
        int last = n;
        
        while(first != last)
        {
            const int mid = (first+last)/2;
            if (A[mid] == target)
                return mid;
            if(A[first] <= A[mid])
            {
                if(A[first]<= target && target < A[mid])
                    last = mid;
                else
                    first = mid+1;
            }
            else
            {
                if(A[mid] < target && target <= A[last-1])
                    first = mid+1;
                else
                    last = mid;
            }
        }
        return -1;
    }
};
