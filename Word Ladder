class Solution {
public:

// unordered_set<string> visited;
    int ladderLength(string start, string end, unordered_set<string> &dict) {
        queue<string> current, next;
        unordered_set<string> visited;
    
        int level = 0;
        bool found = false;
        auto state_isTarget = [&](const string &s)
        {
            return (s == end);
        };
        auto state_extened = [&](const string &s)
        {
    vector<string> result;
    for (size_t i = 0; i < s.size(); ++i)
    { 
        string new_word(s);
        for (char c = 'a' ; c != 'z'; ++c)
        {
            if (c == new_word[i]) { continue; }
	        swap (new_word[i], c);
	
	        if (dict.count(new_word) > 0 && 
                visited.count(new_word) == 0)
            {
	            result.push_back(new_word);
	            visited.insert(new_word);
            }
        swap (c, new_word[i]);
        }
    }
    return result;
};
    
current.push(start);
while (!found && !current.empty())
{
	level++;
	while (!found && !current.empty())
	{
		const string str = current.front();
		current.pop();
		
		const auto &new_state = state_extened(str);
		for (const auto& state : new_state)
		{
			next.push(state);
			if (state_isTarget(state))
			{
				found = true;
				break;
			}
		}
	}
	swap (current, next);
}
if (found) return level+1;
else return 0;

}
    
};
