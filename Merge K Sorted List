/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *mergeKLists(vector<ListNode *> &lists) {
        if (lists.size() == 0)
        {
            return nullptr;
        }
        
        if (lists.size() >= 2)
        {
            vector<ListNode *> temp;
            for (int i=0; i<lists.size()/2; i++)
            {
                temp.push_back(mergetwolink(lists[2*i], lists[2*i+1]));
            }
            if (lists.size()%2 ==1)
            {
                temp.push_back(lists.back());
            }
            lists = temp;
            mergeKLists (lists);
        }
        return lists[0];
    }
private:
    ListNode *mergetwolink(ListNode *l1, ListNode *l2) {
        if (l1 == nullptr)
        {
            return l2;
        }
        if (l2 == nullptr)
        {
            return l1;
        }
        ListNode dummy(-1);
        ListNode *p = &dummy;
        
        while (l1 != nullptr && l2 != nullptr)
        {
            if (l1->val > l2->val)
            {
                p->next = l2;
                l2 = l2->next;
            }
            else 
            {
                p->next = l1;
                l1 = l1->next;
            }
            
            p = p->next;
        }
        p->next = l1 == nullptr? l2 : l1;
        return dummy.next;
    }
};
