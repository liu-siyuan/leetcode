/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *buildTree(vector<int> &inorder, vector<int> &postorder) {
        return buildtree(inorder.begin(), inorder.end(),
                        postorder.begin(), postorder.end());
    }
template<typename InputIterator>
TreeNode *buildtree(InputIterator ino_first, InputIterator ino_last,
                    InputIterator post_first, InputIterator post_last)
    {
        if (ino_first == ino_last) return nullptr;
        if (post_first == post_last) return nullptr;
        
        auto val = *prev(post_last);
        auto root = new TreeNode(val);
        
        auto ino_RootPos = find(ino_first, ino_last, val);
        auto leftsize = distance(ino_first, ino_RootPos);
        auto post_left_last = next(post_first, leftsize);
        
        root -> left = buildtree(ino_first, ino_RootPos,
                                post_first, post_left_last);
        root -> right = buildtree(next(ino_RootPos), ino_last, 
                                next(post_first, leftsize), prev(post_last));
        return root;
    }
};
